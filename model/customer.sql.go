// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: customer.sql

package model

import (
	"context"
	"database/sql"
)

const createCustomer = `-- name: CreateCustomer :exec
INSERT INTO mst_customer (
  id, name, phone_number, user_id, created_at, updated_at
) VALUES (
  $1, $2, $3, $4, $5, $6
)
`

type CreateCustomerParams struct {
	ID          string
	Name        sql.NullString
	PhoneNumber sql.NullString
	UserID      sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) error {
	_, err := q.db.ExecContext(ctx, createCustomer,
		arg.ID,
		arg.Name,
		arg.PhoneNumber,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM mst_employee
WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteCustomer, id)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, name, phone_number, created_at, updated_at
FROM mst_customer
WHERE id = $1
`

type GetCustomerRow struct {
	ID          string
	Name        sql.NullString
	PhoneNumber sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) GetCustomer(ctx context.Context, id string) (GetCustomerRow, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, id)
	var i GetCustomerRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomerPhoneNumber = `-- name: GetCustomerPhoneNumber :one
SELECT id, name, phone_number, created_at, updated_at
FROM mst_customer
WHERE phone_number = $1
`

type GetCustomerPhoneNumberRow struct {
	ID          string
	Name        sql.NullString
	PhoneNumber sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) GetCustomerPhoneNumber(ctx context.Context, phoneNumber sql.NullString) (GetCustomerPhoneNumberRow, error) {
	row := q.db.QueryRowContext(ctx, getCustomerPhoneNumber, phoneNumber)
	var i GetCustomerPhoneNumberRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCustomer = `-- name: ListCustomer :many
SELECT id, name, phone_number, created_at, updated_at
FROM mst_customer
ORDER BY created_at DESC
`

type ListCustomerRow struct {
	ID          string
	Name        sql.NullString
	PhoneNumber sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) ListCustomer(ctx context.Context) ([]ListCustomerRow, error) {
	rows, err := q.db.QueryContext(ctx, listCustomer)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCustomerRow
	for rows.Next() {
		var i ListCustomerRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PhoneNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :exec
UPDATE mst_customer 
SET name = $2, phone_number = $3, user_id = $4, updated_at = $5
WHERE id = $1
`

type UpdateCustomerParams struct {
	ID          string
	Name        sql.NullString
	PhoneNumber sql.NullString
	UserID      sql.NullString
	UpdatedAt   sql.NullTime
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomer,
		arg.ID,
		arg.Name,
		arg.PhoneNumber,
		arg.UserID,
		arg.UpdatedAt,
	)
	return err
}
