// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: employee.sql

package model

import (
	"context"
	"database/sql"
)

const createEmployee = `-- name: CreateEmployee :exec
INSERT INTO mst_employee (
  id, name, phone_number, user_id, created_at, updated_at
) VALUES (
  $1, $2, $3, $4, $5, $6
)
`

type CreateEmployeeParams struct {
	ID          string
	Name        sql.NullString
	PhoneNumber sql.NullString
	UserID      sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) error {
	_, err := q.db.ExecContext(ctx, createEmployee,
		arg.ID,
		arg.Name,
		arg.PhoneNumber,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
DELETE FROM mst_employee
WHERE id = $1
`

func (q *Queries) DeleteEmployee(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteEmployee, id)
	return err
}

const getEmployee = `-- name: GetEmployee :one
SELECT id, name, phone_number, created_at, updated_at
FROM mst_employee
WHERE id = $1
`

type GetEmployeeRow struct {
	ID          string
	Name        sql.NullString
	PhoneNumber sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) GetEmployee(ctx context.Context, id string) (GetEmployeeRow, error) {
	row := q.db.QueryRowContext(ctx, getEmployee, id)
	var i GetEmployeeRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEmployeePhoneNumber = `-- name: GetEmployeePhoneNumber :one
SELECT id, name, phone_number, created_at, updated_at
FROM mst_employee
WHERE phone_number = $1
`

type GetEmployeePhoneNumberRow struct {
	ID          string
	Name        sql.NullString
	PhoneNumber sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) GetEmployeePhoneNumber(ctx context.Context, phoneNumber sql.NullString) (GetEmployeePhoneNumberRow, error) {
	row := q.db.QueryRowContext(ctx, getEmployeePhoneNumber, phoneNumber)
	var i GetEmployeePhoneNumberRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEmployee = `-- name: ListEmployee :many
SELECT id, name, phone_number, created_at, updated_at
FROM mst_employee
ORDER BY created_at DESC
`

type ListEmployeeRow struct {
	ID          string
	Name        sql.NullString
	PhoneNumber sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) ListEmployee(ctx context.Context) ([]ListEmployeeRow, error) {
	rows, err := q.db.QueryContext(ctx, listEmployee)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListEmployeeRow
	for rows.Next() {
		var i ListEmployeeRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PhoneNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployee = `-- name: UpdateEmployee :exec
UPDATE mst_employee 
SET name = $2, phone_number = $3, user_id = $4, updated_at = $5
WHERE id = $1
`

type UpdateEmployeeParams struct {
	ID          string
	Name        sql.NullString
	PhoneNumber sql.NullString
	UserID      sql.NullString
	UpdatedAt   sql.NullTime
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) error {
	_, err := q.db.ExecContext(ctx, updateEmployee,
		arg.ID,
		arg.Name,
		arg.PhoneNumber,
		arg.UserID,
		arg.UpdatedAt,
	)
	return err
}
